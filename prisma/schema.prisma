// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  username          String? @unique
  bio               String?
  email             String @unique
  emailVerified     DateTime?
  image             String?
  role              String
  position          String?
  hashedPassword    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  hasNotification   Boolean?
  isAllowed         Boolean
  
  accounts      Account[]
  sessions      Session[]
  tokens    Token[]
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  
}

model Session {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken      String   @unique
  userId            String @db.ObjectId
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  identifier        String
  token             String   @unique
  expires           DateTime
  @@unique([identifier, token])
}

model Token {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique
  expiryDate  DateTime
  userId      String @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isUsed      Boolean
  createdAt   DateTime @default(now())
}